const { chromium } = require('playwright');

async function checkPageWithMermaid(url, pageName) {
  let browser;
  let page;
  
  try {
    console.log(`\n=== –ü–†–û–í–ï–†–ö–ê ${pageName.toUpperCase()} ===`);
    browser = await chromium.launch({ headless: true });
    const context = await browser.newContext();
    page = await context.newPage();

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
    const errors = [];
    page.on('console', msg => {
      if (msg.type() === 'error') {
        errors.push({
          text: msg.text(),
          url: msg.location().url,
          line: msg.location().lineNumber
        });
      }
    });

    console.log(`–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);
    const response = await page.goto(url, { 
      waitUntil: 'networkidle',
      timeout: 60000 
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    if (response.status() >= 400) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: —Å—Ç–∞—Ç—É—Å ${response.status()}`);
      return { success: false, status: response.status() };
    }

    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

    // –ñ–¥–µ–º –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Mermaid –¥–∏–∞–≥—Ä–∞–º–º
    await page.waitForTimeout(3000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Mermaid –¥–∏–∞–≥—Ä–∞–º–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const mermaidElements = await page.$$('.mermaid');
    console.log(`–ù–∞–π–¥–µ–Ω–æ Mermaid –¥–∏–∞–≥—Ä–∞–º–º: ${mermaidElements.length}`);

    console.log('\n=== –û–®–ò–ë–ö–ò –í –ö–û–ù–°–û–õ–ò ===');
    if (errors.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${errors.length} –æ—à–∏–±–æ–∫:`);
      errors.forEach((error, index) => {
        console.log(`\n${index + 1}. ${error.text}`);
        if (error.url) {
          console.log(`   –ò—Å—Ç–æ—á–Ω–∏–∫: ${error.url}:${error.line}`);
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ Mermaid
      const mermaidErrors = errors.filter(error => 
        error.text.toLowerCase().includes('mermaid')
      );
      if (mermaidErrors.length > 0) {
        console.log('\n=== –û–®–ò–ë–ö–ò MERMAID ===');
        mermaidErrors.forEach((error, index) => {
          console.log(`\n${index + 1}. ${error.text}`);
        });
      } else {
        console.log('\n‚úÖ –û—à–∏–±–æ–∫ Mermaid –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
      }
    } else {
      console.log('‚úÖ –û—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const title = await page.title();
    const currentUrl = await page.url();
    
    console.log('\n=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–¢–†–ê–ù–ò–¶–ï ===');
    console.log('URL:', currentUrl);
    console.log('Title:', title);

    return {
      success: true,
      url: currentUrl,
      title,
      mermaidCount: mermaidElements.length,
      errors: errors.length,
      mermaidErrors: errors.filter(e => e.text.toLowerCase().includes('mermaid')).length
    };

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${pageName}:`, error.message);
    return { success: false, error: error.message };
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

async function finalCheck() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ô –ü–†–û–í–ï–†–ö–ò Docusaurus\n');
  
  const pages = [
    { url: 'http://localhost:3000/docs/atr_fb_zadanie', name: '–û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è' },
    { url: 'http://localhost:3000/docs/atr_fb_zadanie_new', name: '–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏' }
  ];

  const results = [];
  
  for (const page of pages) {
    const result = await checkPageWithMermaid(page.url, page.name);
    results.push({ ...page, ...result });
  }

  console.log('\n' + '='.repeat(50));
  console.log('üìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò');
  console.log('='.repeat(50));
  
  results.forEach((result, index) => {
    console.log(`\n${index + 1}. ${result.name}`);
    console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: ${result.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`);
    if (result.success) {
      console.log(`   üìÑ Mermaid –¥–∏–∞–≥—Ä–∞–º–º: ${result.mermaidCount}`);
      console.log(`   ‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${result.errors}`);
      console.log(`   üö´ –û—à–∏–±–æ–∫ Mermaid: ${result.mermaidErrors}`);
      console.log(`   üîó URL: ${result.url}`);
    } else {
      console.log(`   üí• –û—à–∏–±–∫–∞: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
  const fs = require('fs');
  const screenshotExists = fs.existsSync('docs_screenshot.png');
  console.log(`\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω: ${screenshotExists ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);
  
  if (screenshotExists) {
    const stats = fs.statSync('docs_screenshot.png');
    console.log(`   –†–∞–∑–º–µ—Ä: ${(stats.size / 1024).toFixed(2)} KB`);
  }
}

finalCheck();