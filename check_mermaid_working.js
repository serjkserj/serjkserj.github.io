const { chromium } = require('playwright');

async function checkMermaidWorking() {
  let browser;
  let page;
  
  try {
    console.log('üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Mermaid –¥–∏–∞–≥—Ä–∞–º–º –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    browser = await chromium.launch({ headless: false });
    const context = await browser.newContext();
    page = await context.newPage();

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
    const errors = [];
    page.on('console', msg => {
      if (msg.type() === 'error') {
        errors.push({
          text: msg.text(),
          url: msg.location().url,
          line: msg.location().lineNumber
        });
      }
    });

    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å Mermaid –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏...');
    const response = await page.goto('http://localhost:3000/docs/atr_fb_zadanie_new', { 
      waitUntil: 'networkidle',
      timeout: 60000 
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    if (response.status() >= 400) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: —Å—Ç–∞—Ç—É—Å ${response.status()}`);
      return { success: false, status: response.status() };
    }

    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

    // –ñ–¥–µ–º –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Mermaid –¥–∏–∞–≥—Ä–∞–º–º
    console.log('–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Mermaid –¥–∏–∞–≥—Ä–∞–º–º...');
    await page.waitForTimeout(5000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Mermaid –¥–∏–∞–≥—Ä–∞–º–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const mermaidContainers = await page.$$('.mermaid');
    console.log(`–ù–∞–π–¥–µ–Ω–æ Mermaid –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: ${mermaidContainers.length}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ SVG —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    let svgElementsCount = 0;
    for (const container of mermaidContainers) {
      const svgInside = await container.$$('svg');
      svgElementsCount += svgInside.length;
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ SVG —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–∏–∞–≥—Ä–∞–º–º–∞—Ö: ${svgElementsCount}`);

    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...');
    await page.screenshot({ path: 'verification_mermaid_success.png', fullPage: true });

    console.log('\n=== –û–®–ò–ë–ö–ò –í –ö–û–ù–°–û–õ–ò ===');
    if (errors.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${errors.length} –æ—à–∏–±–æ–∫:`);
      errors.forEach((error, index) => {
        console.log(`\n${index + 1}. ${error.text}`);
        if (error.url) {
          console.log(`   –ò—Å—Ç–æ—á–Ω–∏–∫: ${error.url}:${error.line}`);
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ Mermaid
      const mermaidErrors = errors.filter(error => 
        error.text.toLowerCase().includes('mermaid')
      );
      if (mermaidErrors.length > 0) {
        console.log('\n=== –û–®–ò–ë–ö–ò MERMAID ===');
        mermaidErrors.forEach((error, index) => {
          console.log(`\n${index + 1}. ${error.text}`);
        });
      } else {
        console.log('\n‚úÖ –û—à–∏–±–æ–∫ Mermaid –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
      }
    } else {
      console.log('‚úÖ –û—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const title = await page.title();
    const currentUrl = await page.url();
    
    console.log('\n=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–¢–†–ê–ù–ò–¶–ï ===');
    console.log('URL:', currentUrl);
    console.log('Title:', title);

    console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò MERMAID ===');
    if (svgElementsCount > 0) {
      console.log(`‚úÖ –£–°–ü–ï–•: Mermaid –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ù–∞–π–¥–µ–Ω–æ ${svgElementsCount} SVG —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    } else {
      console.log('‚ùå –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: Mermaid –¥–∏–∞–≥—Ä–∞–º–º—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ SVG —ç–ª–µ–º–µ–Ω—Ç—ã');
      console.log('   –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å:');
      console.log('   - –í—Ä–µ–º–µ–Ω–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ (–Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏)');
      console.log('   - –ü—Ä–æ–±–ª–µ–º–∞–º–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π Mermaid');
      console.log('   - –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ Docusaurus');
    }

    return {
      success: true,
      url: currentUrl,
      title,
      mermaidContainers: mermaidContainers.length,
      svgElements: svgElementsCount,
      errors: errors.length,
      mermaidErrors: errors.filter(e => e.text.toLowerCase().includes('mermaid')).length
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Mermaid:', error.message);
    return { success: false, error: error.message };
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkMermaidWorking()
  .then(result => {
    console.log('\n' + '='.repeat(60));
    console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò');
    console.log('='.repeat(60));
    
    if (result.success) {
      console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docusaurus –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log(`üìä Mermaid –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: ${result.mermaidContainers}`);
      console.log(`üìä SVG —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${result.svgElements}`);
      console.log(`‚ùå –û—à–∏–±–æ–∫: ${result.errors}`);
      console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: verification_mermaid_success.png`);
      
      if (result.svgElements > 0) {
        console.log('\nüéâ Mermaid –¥–∏–∞–≥—Ä–∞–º–º—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç!');
      } else {
        console.log('\n‚ö†Ô∏è  Mermaid –¥–∏–∞–≥—Ä–∞–º–º—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
      }
    } else {
      console.log('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', result.error);
    }
  })
  .catch(error => {
    console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  });